apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-dns
  namespace: kube-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-dns
  namespace: kube-system
  labels:
    k8s-app: kube-dns
data:
  dns-vertical-autoscaler: |-
    {
      "apiVersion": "autoscaling/v2beta2",
      "kind": "VerticalPodAutoscaler",
      "metadata": {
        "name": "kube-dns-vpa",
        "namespace": "kube-system"
      },
      "spec": {
        "targetRef": {
          "apiVersion": "apps/v1",
          "kind": "Deployment",
          "name": "kube-dns",
          "selector": {
            "matchLabels": {
              "k8s-app": "kube-dns"
            }
          }
        },
        "updatePolicy": {
          "updateMode": "Off"
        },
        "resourcePolicy": {
          "containerPolicies": [
            {
              "containerName": "coredns",
              "mode": "Auto",
              "minAllowed": {
                "cpu": "50m",
                "memory": "50Mi"
              },
              "maxAllowed": {
                "cpu": "250m",
                "memory": "250Mi"
              },
              "volumeMounts": [
                {
                  "name": "dns-cache",
                  "mountPath": "/root"
                }
              ]
            }
          ],
          "default": {
            "mode": "Off"
          }
        }
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
  labels:
    k8s-app: kube-dns
data:
  Corefile: |
    .:53 {
        errors
        health {
          lameduck 5s
        }
        ready
        kubernetes cluster.local in-addr.arpa ip6.arpa {
          pods insecure
          upstream /etc/resolv.conf
          fallthrough in-addr.arpa ip6.arpa
        }
        prometheus :9153
        forward . /etc/resolv.conf {
          max_concurrent 1000
        }
        cache 30
        loop
        reload
        loadbalance
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-dns
  namespace: kube-system
  labels:
    k8s-app: kube-dns
spec:
  selector:
    matchLabels:
      k8s-app: kube-dns
  template:
    metadata:
      labels:
        k8s-app: kube-dns
    spec:
      serviceAccountName: kube-dns
      containers:
      - name: coredns
        image: k8s.gcr.io/coredns/coredns:v1.8.4
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: "170Mi"
            cpu: "100m"
          requests:
            memory: "70Mi"
            cpu: "50m"
        args: [ "-conf", "/etc/coredns/Corefile" ]
        volumeMounts:
        - name: config-volume
          mountPath: /etc/coredns
          readOnly: true
        - name: dns-cache
          mountPath

